/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
/*
   nu     =1.74e-7 # m^2/s
   Tunit  =1 # K
   h      =0.03025 # m
   Ret    =395
   Pr     =[0.025 0.71  1     2     5     7     10   ]
   Reb    =[13967 13967 14124 14124 14124 14124 14124]
   ub     = Reb * nu / ( 2 * h )
   SsF    = Tunit*nu*Ret/h^2

   Results:
   ub     = 4.016955371900826e-02
   SsF    = 7.510962365958609e-02
*/

momentumSource
{
    type            meanVelocityForce;
    active          yes;
 
    meanVelocityForceCoeffs
    {
        selectionMode   all;
 
        fields          (U);
        Ubar            (4.016955371900826e-02 0 0);
        relaxation      1.0;
    }
}

energySource
{
    type            scalarCodedSource;
    active          yes;
    name            enthalpySource;
    selectionMode   all;

    scalarCodedSourceCoeffs
    {
        selectionMode   all;
        fields          (h);

        codeInclude
        #{

        #};

        codeCorrect
        #{
            //Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{
            const scalarField& V = mesh_.V();
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");
            const scalar Uavg = U.weightedAverage(mesh_.V()).value().component(vector::X);

            scalarField& hSource = eqn.source();
            hSource += ( 7.510962365958609e-02 / Uavg ) * ( U.component(vector::X) * V );
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};

        sourceTimeCoeffs
        {
            $scalarCodedSourceCoeffs;
        }
    }

}
