/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

momentumSource
{
    type            meanVelocityForce;
    active          yes;
 
    meanVelocityForceCoeffs
    {
        selectionMode   all;
 
        fields          (U);
        /*
            nu  = 1.74e-7
            h   = 0.03025
            Reb = 24428
            ub  = Reb * nu / ( 2 * h )

            ub  = 7.025573553719008e-02
        */
        Ubar            (7.025573553719008e-02 0 0);
        relaxation      1.0;
    }
}

energySource
{
    type            scalarCodedSource;
    active          yes;
    name            sourceTime;
    selectionMode   all;

    scalarCodedSourceCoeffs
    {
        selectionMode   all;
        fields          (h);

        codeInclude
        #{

        #};

        codeCorrect
        #{
            //Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{
            const scalarField& V = mesh_.V();
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");

            scalarField& hSource = eqn.source();
            // Source term is
            // - 2 * rho * c_p /(Re_b * Pr) * v_1 * T_gradient
            // where Re_b = 2 h u_b / nu
            // and T_gradient is the gradient from the boundary condition
            // (together with the sign). Source in the above form and gradient
            // have the opposite sign!)
            // Re_b = 24428
            // Pr = 0.025
            // T_gradient = 5.289256198347108e+02
            hSource += 1.732194595823517e+00*U.component(vector::X)*V;
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};

        sourceTimeCoeffs
        {
            $scalarCodedSourceCoeffs;
        }
    }

}
