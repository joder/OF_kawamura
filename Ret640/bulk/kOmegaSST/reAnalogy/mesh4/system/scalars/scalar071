scalar071
{
    /* Coefficients calculated with octave:
       Tunit  =1
       h      =0.03025
       Ret    =640
       Pr     =[0.025 0.71 ]
       Reb    =[24428 24428]
       Prt    =[0.85  0.85 ]
       alphaD =1./Pr
       nu     =1.74e-7
       B      =-Tunit/h*Ret.*Pr
       SsF    =-Tunit*nu*Ret/h^2
       alphaDt=1./Prt

       Source is then
       Ss     =SsF*Ux/Uavg*V;

       Results:
                0.025                   0.71
       alphaD =[ 4.000000000000000e+01   1.408450704225352e+00]
       B      =[-5.289256198347108e+02  -1.502148760330579e+04]
       Ssf    =-1.216966054231268e-01
       alphaDt=[ 1.176470588235294e+00   1.176470588235294e+00]
    */
    type                scalarTransport;
    functionObjectLibs  ("libsolverFunctionObjects.so");
    enabled             true;
    writeControl        outputTime;

    field           T071;
    nCorr           1;
    // Diffusion coefficient D = alphaD * nu + alphaDt * nut
    // alphaD = alpha = 1/Pr
    alphaD          1.408450704225352e+00;
    // alphaDt = alpha_t = 1/Prt
    alphaDt         1.176470588235294e+00;
    nut             nut;
    schemesField    h;
    log             yes;
    fvOptions
    {
        scalarSource
        {
            type            scalarCodedSource;
            active          yes;
            name            scalar071Source;
            selectionMode   all;

            scalarCodedSourceCoeffs
            {
                selectionMode   all;
                fields          (T071);

                codeInclude
                #{

                #};

                codeCorrect
                #{
                    //Pout<< "**codeCorrect**" << endl;
                #};

                codeAddSup
                #{
                    const scalarField& V = mesh_.V();
                    const volVectorField& U = mesh().lookupObject<volVectorField>("U");
                    const scalar Uavg = U.weightedAverage(mesh_.V()).value().component(vector::X);

                    scalarField& scalar = eqn.source();
                    scalar += ( -1.216966054231268e-01 / Uavg ) * ( U.component(vector::X) * V );
                #};

                codeSetValue
                #{
                    //Pout<< "**codeSetValue**" << endl;
                #};

                code
                #{
                    $codeInclude
                    $codeCorrect
                    $codeAddSup
                    $codeSetValue
                #};

                sourceTimeCoeffs
                {
                    $scalarCodedSourceCoeffs;
                }
            }
        }
    }
}
